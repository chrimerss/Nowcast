{"format": "torch", "nodes": [{"name": "radarnet", "id": 140363065867728, "class_name": "RadarNet(\n  (encoder): BaseNet(\n    (Wxi): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (Whi): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (Wxf): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (Whf): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (Wxc): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (Whc): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (Wxo): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (Who): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n  )\n  (predictor): BaseNet(\n    (Wxi): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (Whi): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (Wxf): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (Whf): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (Wxc): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (Whc): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (Wxo): Conv2d(1, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (Who): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n  )\n  (lastconv): Conv2d(16, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n)", "parameters": [["encoder.Wxi.weight", [16, 1, 3, 3]], ["encoder.Wxi.bias", [16]], ["encoder.Whi.weight", [16, 16, 3, 3]], ["encoder.Whi.bias", [16]], ["encoder.Wxf.weight", [16, 1, 3, 3]], ["encoder.Wxf.bias", [16]], ["encoder.Whf.weight", [16, 16, 3, 3]], ["encoder.Whf.bias", [16]], ["encoder.Wxc.weight", [16, 1, 3, 3]], ["encoder.Wxc.bias", [16]], ["encoder.Whc.weight", [16, 16, 3, 3]], ["encoder.Whc.bias", [16]], ["encoder.Wxo.weight", [16, 1, 3, 3]], ["encoder.Wxo.bias", [16]], ["encoder.Who.weight", [16, 16, 3, 3]], ["encoder.Who.bias", [16]], ["predictor.Wxi.weight", [16, 1, 3, 3]], ["predictor.Wxi.bias", [16]], ["predictor.Whi.weight", [16, 16, 3, 3]], ["predictor.Whi.bias", [16]], ["predictor.Wxf.weight", [16, 1, 3, 3]], ["predictor.Wxf.bias", [16]], ["predictor.Whf.weight", [16, 16, 3, 3]], ["predictor.Whf.bias", [16]], ["predictor.Wxc.weight", [16, 1, 3, 3]], ["predictor.Wxc.bias", [16]], ["predictor.Whc.weight", [16, 16, 3, 3]], ["predictor.Whc.bias", [16]], ["predictor.Wxo.weight", [16, 1, 3, 3]], ["predictor.Wxo.bias", [16]], ["predictor.Who.weight", [16, 16, 3, 3]], ["predictor.Who.bias", [16]], ["lastconv.weight", [1, 16, 3, 3]], ["lastconv.bias", [1]]], "output_shape": [[1, 10, 1, 648, 800]], "num_parameters": [144, 16, 2304, 16, 144, 16, 2304, 16, 144, 16, 2304, 16, 144, 16, 2304, 16, 144, 16, 2304, 16, 144, 16, 2304, 16, 144, 16, 2304, 16, 144, 16, 2304, 16, 144, 1]}], "edges": []}